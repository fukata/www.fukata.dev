<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-23T22:36:39+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">fukata.dev</title><subtitle>タイのチェンマイを拠点に活動しているプログラマーです。コロナの影響で戻れずに日本に滞在中。</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2020/11/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-11-23T22:04:46+09:00</published><updated>2020-11-23T22:04:46+09:00</updated><id>http://localhost:4000/jekyll/update/2020/11/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/11/23/welcome-to-jekyll.html">&lt;h1 id=&quot;h1&quot;&gt;H1&lt;/h1&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;h2 id=&quot;h2&quot;&gt;H2&lt;/h2&gt;
&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;h3&quot;&gt;H3&lt;/h3&gt;
&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">H1</summary></entry><entry><title type="html">Noise Supression on Linux</title><link href="http://localhost:4000/2020/11/22/noise-supression-on-linux.html" rel="alternate" type="text/html" title="Noise Supression on Linux" /><published>2020-11-22T21:58:00+09:00</published><updated>2020-11-22T21:58:00+09:00</updated><id>http://localhost:4000/2020/11/22/noise-supression-on-linux</id><content type="html" xml:base="http://localhost:4000/2020/11/22/noise-supression-on-linux.html">&lt;p&gt;リモート会議中に自分の音声にノイズが混じっている事が多いので少し改善してみました。&lt;/p&gt;

&lt;p&gt;マイクもソニーの安いイヤフォンに付いているものを使っていたのをBlue Yetiに変更。ただ、YouTube向けに何か撮影するならこのマイクで良かったかもしれないですけど会議だけを考えるならスピーカーフォンやヘッドセットで十分だった可能性が高いですね。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://amzn.to/3kRFOhm&quot;&gt;eMeet Luna&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amzn.to/2IPMb80&quot;&gt;Sennheiser SC 165 USB-C (508356)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この辺りが持ち運びにも適していて自分には合っていたかもなぁと購入後に少し思いました。&lt;/p&gt;

&lt;p&gt;リモート会議ではGoogle Meetsを使うことが多く、自分のアカウントではまだノイズキャンセリング機能が使えないのでキーボードの打鍵音やマウスのクリック音の環境音が入ってしまうのでこちらも改善する必要があり調べてみたところ、&lt;a href=&quot;https://github.com/lawl/NoiseTorch&quot;&gt;NoiseTorch&lt;/a&gt; で解消できそうなので使用してみたら見事に改善されました。&lt;/p&gt;

&lt;p&gt;とりあえず、しばらくはこの体制でやってみようと思います。&lt;/p&gt;

&lt;p&gt;今は基本的に自宅で仕事しているのでBlue Yetiで問題ないですけどタイに戻ってカフェとかで仕事することが増えたらヘッドセットが欲しくなる可能性が高いですね。&lt;/p&gt;</content><author><name></name></author><summary type="html">リモート会議中に自分の音声にノイズが混じっている事が多いので少し改善してみました。</summary></entry><entry><title type="html">Goodbye Digital Ocean, Hello Firebase</title><link href="http://localhost:4000/2020/11/02/goodbye-digitalocean-hello-firebase-functions.html" rel="alternate" type="text/html" title="Goodbye Digital Ocean, Hello Firebase" /><published>2020-11-02T23:43:00+09:00</published><updated>2020-11-02T23:43:00+09:00</updated><id>http://localhost:4000/2020/11/02/goodbye-digitalocean-hello-firebase-functions</id><content type="html" xml:base="http://localhost:4000/2020/11/02/goodbye-digitalocean-hello-firebase-functions.html">&lt;h1 id=&quot;digital-oceanからfirebaseに乗り換え&quot;&gt;Digital OceanからFirebaseに乗り換え&lt;/h1&gt;

&lt;p&gt;自分で運用しているとあるサービスをDigital OceanからFirebaseに乗り換えしました。&lt;/p&gt;

&lt;p&gt;理由は特に重要でもないサービスに毎月数十ドルかかっているのが嫌だったからです。結局このサービスも2年近くダラダラと動いており数十ドル×24ヶ月以上と考えると非常に損した気持ちになります。&lt;/p&gt;

&lt;p&gt;本日、11月02日が仕事が休みだったこともあり以前からちまちま進めていたリプレイスを一気に進めることにしました。&lt;/p&gt;

&lt;h1 id=&quot;乗り換え先としてfirebaseを選択&quot;&gt;乗り換え先としてFirebaseを選択&lt;/h1&gt;

&lt;p&gt;元々、Rails + Sidekiq + Capybara + MySQLという構成でしたが、当面必要な機能はFunctionsで十分そうだったのでFunctions + Firestoreにして、言語もTypeScript + Puppeteerにしました。&lt;/p&gt;

&lt;p&gt;以前は管理用のUIもありましたが特に重要ではなかったので削除しました。&lt;/p&gt;

&lt;h1 id=&quot;typescriptを選んだ理由&quot;&gt;TypeScriptを選んだ理由&lt;/h1&gt;

&lt;p&gt;最近、仕事や趣味でRubyを使うことが多く、TypeScriptを多く触る機会が欲しかったというのが一番の理由です。&lt;/p&gt;

&lt;h1 id=&quot;functions&quot;&gt;Functions&lt;/h1&gt;

&lt;p&gt;APIはもちろん、定期実行も簡単に実装できるのは嬉しい。&lt;/p&gt;

&lt;p&gt;さらにFirestoreへのアクセスも簡単なのでさくっとAPI生やしたり定期実行を行ってデータを永続化するのが非常に楽です。&lt;/p&gt;

&lt;h1 id=&quot;firestore&quot;&gt;Firestore&lt;/h1&gt;

&lt;p&gt;特に深く考えずに実装すると read/write が多くなってしまい無料枠をあっさり超えそうだったので無駄な read/write が発生しないようにチューニングしました。&lt;/p&gt;

&lt;h2 id=&quot;readがやたらと多い&quot;&gt;readがやたらと多い&lt;/h2&gt;

&lt;p&gt;read/writeを改善したと思って定期的に確認していたら以前より悪化していることが分かりました。&lt;/p&gt;

&lt;p&gt;ただ、コードをいくら見てもreadが増える原因となるような箇所が見つからなかったのでもしかしたらと思って探してみるとどうやらfirebaseコンソール上でfirestoreのデータを閲覧した時もreadが増えるらしいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/54729505/google-cloud-firestore-console-reading-of-all-documents-and-charges&quot;&gt;Google Cloud Firestore console reading of all documents and charges - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;puppeteer&quot;&gt;Puppeteer&lt;/h1&gt;

&lt;p&gt;capybaraから移ったということもありAPIの違いなどは最初は違和感がありましたが慣れれば特に不自由なことは今のところありません。&lt;/p&gt;

&lt;p&gt;ただ、Functions上で動かしているからなのかタイムアウトが発生することがあったりmemory limitが発生してしまうことがあるのでこの辺は要調整です。&lt;/p&gt;</content><author><name></name></author><summary type="html">Digital OceanからFirebaseに乗り換え</summary></entry><entry><title type="html">RDSのスロークエリの取得、確認方法</title><link href="http://localhost:4000/2020/09/13/how-to-check-rds-slowquery-log.html" rel="alternate" type="text/html" title="RDSのスロークエリの取得、確認方法" /><published>2020-09-13T22:32:00+09:00</published><updated>2020-09-13T22:32:00+09:00</updated><id>http://localhost:4000/2020/09/13/how-to-check-rds-slowquery-log</id><content type="html" xml:base="http://localhost:4000/2020/09/13/how-to-check-rds-slowquery-log.html">&lt;h1 id=&quot;突然スパイクするcpu使用率&quot;&gt;突然スパイクするCPU使用率&lt;/h1&gt;

&lt;p&gt;今まで平穏に過ごしていたデータベースのCPU使用率が突然跳ね上がり出しました。&lt;/p&gt;

&lt;p&gt;アカウントに紐づくデータが特別多いアカウントの活動が活発なことが起因しているようでした。&lt;/p&gt;

&lt;h1 id=&quot;スロークエリのダウンロード&quot;&gt;スロークエリのダウンロード&lt;/h1&gt;

&lt;p&gt;とりあえずこんな感じのスクリプトを書いて直近のスロークエリを手元にダウンロード出来るようにしました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/env bash

DB_INSTANCE_ID=&quot;RDSのインスタンスID&quot;
AWS_PROFILE=&quot;AWSプロフィール&quot;
aws rds --profile $AWS_PROFILE describe-db-log-files --db-instance-identifier $DB_INSTANCE_ID |jq -r .DescribeDBLogFiles[].LogFileName |grep slow &amp;gt; slowquery-list.txt
for log in $(cat slowquery-list.txt)
do
  echo $log
  aws rds --profile $AWS_PROFILE download-db-log-file-portion --db-instance-identifier $DB_INSTANCE_ID --log-file-name $log &amp;gt; $(echo $log | cut -d / -f 2)
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;スロークエリの確認&quot;&gt;スロークエリの確認&lt;/h1&gt;

&lt;p&gt;個別のファイルを確認する際はこんな感じです。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat mysql-slowquery.log.2020-09-11.13 |jq -rs .[].LogFileData |less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ざっと時間別のクエリ数を確認したい時のスクリプトはこんな感じです。&lt;/p&gt;

&lt;p&gt;クエリ数の多い時間順に並べたい場合はwc -lの結果をsortコマンドに繋げても良いでしょう。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for f in $(ls mysql-slowquery.log.2020-09-11.*); do echo -n &quot;$f &quot;;  cat $f |jq -rs .[].LogFileData |grep 'User@Host' - |wc -l; done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">突然スパイクするCPU使用率</summary></entry><entry><title type="html">Slack経由でBlue/Greenデプロイする</title><link href="http://localhost:4000/2020/06/03/deploy-bot.html" rel="alternate" type="text/html" title="Slack経由でBlue/Greenデプロイする" /><published>2020-06-03T03:36:00+09:00</published><updated>2020-06-03T03:36:00+09:00</updated><id>http://localhost:4000/2020/06/03/deploy-bot</id><content type="html" xml:base="http://localhost:4000/2020/06/03/deploy-bot.html">&lt;h1 id=&quot;デプロイボット&quot;&gt;デプロイボット&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack-ruby-bot&lt;/code&gt; を使ってslack経由でBlue/Greenデプロイ出来るbotを作りました。&lt;/p&gt;

&lt;p&gt;bot用フレームワークだと &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; や &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node.js&lt;/code&gt; 製が多い気がするが社内の技術スタックを考慮してruby製のものを使ってみましたが比較的使いやすかったです。&lt;/p&gt;

&lt;h1 id=&quot;連携&quot;&gt;連携&lt;/h1&gt;

&lt;p&gt;BitBucket, Slack, CircleCI, ElasticBeanstalk を連携することで実現しています。&lt;/p&gt;

&lt;h1 id=&quot;heroku&quot;&gt;Heroku&lt;/h1&gt;

&lt;p&gt;botを動かしているのはherokuです。&lt;/p&gt;

&lt;p&gt;Heroku Teamsを使っているがHeroku TeamsだとFree Dynoが使えないということを今回知りました。&lt;/p&gt;

&lt;p&gt;Free Dynoだけでいいなら無理にTeamsにしない方が良いかもしれません。&lt;/p&gt;

&lt;h1 id=&quot;解決したい点&quot;&gt;解決したい点&lt;/h1&gt;

&lt;p&gt;なぜ実装しようかと思ったかというと下記のような点を解決したかったからです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;すべて完了するまで最大30分近くネットが繋がっている必要があり、途中で接続が切れたりすると最初からやり直しになってしまうという状態だった。&lt;/li&gt;
  &lt;li&gt;デプロイのために各自の環境にセットアップが必要。&lt;/li&gt;
  &lt;li&gt;各種手作業で行う箇所があった。
    &lt;ul&gt;
      &lt;li&gt;リリース完了報告&lt;/li&gt;
      &lt;li&gt;作業経過報告&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;デプロイ担当者のネットワーク環境に依存している部分がある。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;fedexウィーク&quot;&gt;Fedexウィーク&lt;/h1&gt;

&lt;p&gt;プロトタイプ自体はFedexウィークという業務に直結しないタスクでも自由に行ってよいという制度の中で作成しました。&lt;/p&gt;

&lt;p&gt;突貫工事の部分だったり他のプロジェクトに流用できるように設定ファイル経由にしたりと細かいところの調整に＋1週間くらい業務タスクの合間に行ってやっと完成しました。&lt;/p&gt;

&lt;h1 id=&quot;これから&quot;&gt;これから&lt;/h1&gt;

&lt;p&gt;今はデプロイだけを担当しているが他の事もやらせていきたいところです。&lt;/p&gt;

&lt;p&gt;タイに戻った時に不安定なネット環境でもちゃんとデプロイが安定してできることを早く確認したいです。&lt;/p&gt;</content><author><name></name></author><summary type="html">デプロイボット</summary></entry><entry><title type="html">vultrへ引っ越し</title><link href="http://localhost:4000/traha/vultr/2020/05/25/hello-vultr.html" rel="alternate" type="text/html" title="vultrへ引っ越し" /><published>2020-05-25T09:25:00+09:00</published><updated>2020-05-25T09:25:00+09:00</updated><id>http://localhost:4000/traha/vultr/2020/05/25/hello-vultr</id><content type="html" xml:base="http://localhost:4000/traha/vultr/2020/05/25/hello-vultr.html">&lt;p&gt;nuxt.js + Railsで実際に何か作ってみようと始めた旅行系のブログのサーバーをDigital OceanからVultrに引っ越しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://traha.org&quot;&gt;https://traha.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/fukata/status/1260071907119886338&quot;&gt;https://twitter.com/fukata/status/1260071907119886338&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引っ越しの作業自体はansibleのスクリプトがあったのでそれを流すだけです。&lt;/p&gt;

&lt;p&gt;この機会にOSもUbuntu 18.04 から 20.04 になりました。&lt;/p&gt;

&lt;p&gt;vultr自体はVPS単体として使うだけなら特に不満もなく使いやすくて良い。Digital Ocean(Singapore)から引っ越したのは日本リージョンが存在するから。実際に引っ越してから表示速度も向上したので満足です。&lt;/p&gt;

&lt;p&gt;趣味で作っている他のサーバー群もそのうち引っ越ししたいです。&lt;/p&gt;</content><author><name></name></author><category term="traha" /><category term="vultr" /><summary type="html">nuxt.js + Railsで実際に何か作ってみようと始めた旅行系のブログのサーバーをDigital OceanからVultrに引っ越しました。</summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/2020/05/24/hello-world.html" rel="alternate" type="text/html" title="Hello World" /><published>2020-05-24T17:03:00+09:00</published><updated>2020-05-24T17:03:00+09:00</updated><id>http://localhost:4000/2020/05/24/hello-world</id><content type="html" xml:base="http://localhost:4000/2020/05/24/hello-world.html">&lt;p&gt;ただのリンク集になっていたこのドメインをjekyllを使ってブログにしてみました。&lt;/p&gt;</content><author><name></name></author><summary type="html">ただのリンク集になっていたこのドメインをjekyllを使ってブログにしてみました。</summary></entry></feed>